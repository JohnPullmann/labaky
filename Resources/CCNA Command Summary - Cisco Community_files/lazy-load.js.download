var observer,imageCount;function reloadImages(){const images=document.querySelectorAll('.js-lazy-image'),normalimages=document.querySelectorAll('.js-image'),config={rootMargin:'70px 0px',threshold:0.01};imageCount=images.length+normalimages.length;if(!('IntersectionObserver' in window)){loadImagesImmediately(images),loadImagesImmediately(normalimages)}else{observer=new IntersectionObserver(onIntersection,config);for(let e,f=0;f<images.length;f++)(e=images[f],!e.classList.contains('js-lazy-image--handled'))&&observer.observe(e);for(let e,f=0;f<normalimages.length;f++)(e=normalimages[f],!e.classList.contains('js-image--handled'))&&observer.observe(e)}} function preloadImage(e){const h=new Image,f=e.dataset.src;h.src=f,h.onload=applyImage(e,f)} function loadImagesImmediately(e){for(let f,g=0;g<e.length;g++)f=e[g],preloadImage(f)} function disconnect(){observer&&observer.disconnect()} function onIntersection(e){0===imageCount&&observer.disconnect();for(let f,g=0;g<e.length;g++)f=e[g],0<f.intersectionRatio&&(imageCount--,observer.unobserve(f.target),preloadImage(f.target))} function applyImage(e,f){e.classList.contains('js-lazy-image')?(e.classList.add('js-lazy-image--handled'),e.style.backgroundImage="url('"+f+"')",e.classList.add('fade-in')):e.classList.contains('js-image')&&(e.classList.add('js-image--handled'),e.src=f,e.classList.add('fade-in'))} reloadImages()
